◼️ 参考サイト
https://qiita.com/greenteabiscuit/items/c40ba038703c9f33499b

◼️ 初期構築に必要なコマンド
docker exec -it web_back bashにて以下のコマンドが必要
--- gitにプロジェクトやアプリが作成されていない時のみ
django-admin startproject config .
python manage.py startapp todo
--- その後に必要な作業(これは最初の人が一度だけ実施すれば、その後他の人はgitのファイルとれば不要)
python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser
--- これは必要ならやって・・・
python manage.py collectstatic

docker exec -it web_front bashにて以下のコマンドが必要
--- gitにプロジェクトやアプリが作成されていない時
npx create-react-app .
--- パッケージ追加
yarn add <package>
--- ↑でaddしたのがpackage.jsonに書かれるので、それに基づいてinstall
yarn install
--- 開発サーバーでのreactの立ち上げ(結構待つ)
npm start

--- reactをドラックアンドドロップでいじる
react-beautiful-dnd

◼️ env

├── backend
│   ├── nginx
│   │   ├── default.nginx.conf
│   │   └── Dockerfile.nginx
│   └── web-back
│       ├── Dockerfile
│       ├── .env
│       └── requirements.txt
├── docker-compose.yml
├── frontend
├── mysql
│   ├── Dockerfile
│   └── my.cnf
├── mysql_volume
└── sql
    └── init.sql

◼️ docker-compose command list
・docker-compose.ymlに従いイメージ作成
docker-compose build

・docker-compose.ymlに書かれた依存関係をもとに、よしなにイメージを元にしてコンテナの作成と起動
　*イメージはdocker-compose buildで作成する必要があります
docker-compose up -d

・docker-compose.ymlに書かれている内容をみてコンテナを停止・削除してくれる
　*そのコンテナとネットワークの削除もしてくれます
docker-compose down

・コンテナ起動
docker-compose start

・コンテナ停止
docker-compose stop

・コンテナ削除
docker rm コンテナ名orコンテナID

・コンテナ全消去
docker rm $(docker ps -aq)

・image削除
docker rmi イメージID 

・image全消去
docker rmi $(docker images -q)

・コンテナ一覧の表示
docker-compose ps
docker ps / docker ps -a

・コンテナimageの一覧表示
docker images

・ログ確認
docker-compose logs
docker logs

・コンテナアクセス
docker exec -it コンテナ名 bash

◼️ bash関連
.bash_profile
if [ -f ~/.bashrc ] ; then
. ~/.bashrc
fi

alias brew="PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin brew"
source ~/.profile

.bashrc
alias vi="vim"
alias ll="ls -la"
alias python='python3'

if [ "$(uname)" = 'Darwin' ]; then
    export LSCOLORS=gxfxcxdxbxegedabagacad
    alias ls='ls -G'
else
    eval `dircolors ~/.colorrc`
    alias ls='ls --color=auto'
fi


export PATH="$HOME/.pyenv/shims:$PATH"

###pyenv設定###
export LDFLAGS="-L/usr/local/opt/zlib/lib"
export CPPFLAGS="-I/usr/local/opt/zlib/include"
export PKG_CONFIG_PATH="/usr/local/opt/zlib/lib/pkgconfig"
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/shims:$PATH"
export LC_MESSAGES="C"
eval "$(pyenv init --path)"
eval "$(pyenv init -)"
######

###git表示設定###
GIT_PS1_SHOWDIRTYSTATE=true
if [ -f ~/.git-completion.sh ]; then
    source ~/.git-completion.sh
fi
if [ -f ~/.git-prompt.sh ]; then
    source ~/.git-prompt.sh
fi
PS1='[\[\033[32m\]\u@\h\[\033[00m\] \[\033[33m\]\w\[\033[1;36m\]$(__git_ps1 " (%s)")\[\033[00m\]]\n\$ '
######

###docker設定###
export MYSQL_DATABASE=isehan
export MYSQL_USER=isehan
export MYSQL_PASSWORD=isehan
export MYSQL_ROOT_PASSWORD=isehan
######

###nvm設定 ###
export NVM_DIR=~/.nvm
source $(brew --prefix nvm)/nvm.sh
######

export PATH=$HOME/.nodebrew/current/bin:$PATH

. "$HOME/.cargo/env"
export PATH=$PATH:~/.cargo/bin


